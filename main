#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

// FND 숫자/문자 데이터 (공통 음극 기준)
unsigned char fnd_number[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
unsigned char fnd_bell[4] = {0x7C, 0x79, 0x38, 0x38}; // 'B', 'E', 'L', 'L'
unsigned char fnd_select[4] = {0x08, 0x04, 0x02, 0x01}; // DIGIT1~DIGIT4 선택

// 기준값 설정
#define THRESHOLD_LOW 500   // 낮은 경고 구간
#define THRESHOLD_MID 700   // 중간 경고 구간
#define THRESHOLD_HIGH 1000 // 높은 경고 구간

// PWM 초기화
void pwm_init() {
    TCCR1A |= (1 << WGM10) | (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1); // Fast PWM, Non-inverting mode
    TCCR1B |= (1 << WGM12) | (1 << CS10); // Prescaler: 1
    DDRE |= (1 << PE3) | (1 << PE4) | (1 << PE5); // R, G, B 핀 (PORTE로 변경)
}

// RGB LED 색상 설정
void led_set_color(uint8_t r, uint8_t g, uint8_t b) {
    if (r > 0) PORTE |= (1 << PE3); else PORTE &= ~(1 << PE3); // 빨강
    if (g > 0) PORTE |= (1 << PE4); else PORTE &= ~(1 << PE4); // 초록
    if (b > 0) PORTE |= (1 << PE5); else PORTE &= ~(1 << PE5); // 파랑
}

// 부저 울리기
void buzzer_alert() {
    PORTB |= (1 << PB4); // 부저 켜기
    _delay_ms(100);      // 200ms 울림
    PORTB &= ~(1 << PB4); // 부저 끄기
    _delay_ms(100);      // 200ms 대기
}

// ADC 초기화
void adc_init() {
    ADMUX = 0x00; // ADC0 선택
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Prescaler 128
}

// ADC 값 읽기
unsigned int read_adc() {
    ADCSRA |= (1 << ADSC); // ADC 변환 시작
    while (ADCSRA & (1 << ADSC)); // 변환 완료 대기
    return ADC; // 결과 반환
}

// CdS 값에 따라 LED 색상 및 부저 동작 설정
void set_led_and_buzzer_by_cds(uint16_t cds_value) {
    if (cds_value > THRESHOLD_HIGH) { // 1000보다 클 때
        led_set_color(0, 0, 255); // 빨강 (높은 채도)
        buzzer_alert();           // 부저 울리기
    } else if (cds_value > THRESHOLD_MID) { // 700~1000 구간
        led_set_color(0, 255, 0); // 초록 (중간 채도)
    } else { // 500 이하
        led_set_color(255, 0, 0); // 파랑 (낮은 채도)
    }
}


// FND에 값 출력
void fnd_display(unsigned char digits[4]) {
    static unsigned char current_digit = 0;
    PORTC = digits[current_digit];
    PORTG = fnd_select[current_digit];
    current_digit = (current_digit + 1) % 4;
    _delay_ms(1);
}

// FND 값 갱신
void update_digits(unsigned int value, unsigned char digits[4]) {
    digits[0] = fnd_number[value / 1000 % 10];
    digits[1] = fnd_number[value / 100 % 10];
    digits[2] = fnd_number[value / 10 % 10];
    digits[3] = fnd_number[value % 10];
}

int main(void) {
    DDRC = 0xFF;  // FND 출력 설정
    DDRG = 0x0F;  // FND 선택 핀 설정
    DDRE = 0xFF;  // LED 출력 설정
    DDRB |= (1 << PB4); // 부저 출력 설정

    adc_init(); // ADC 초기화
    pwm_init(); // PWM 초기화

    unsigned int cds_value = 0;
    unsigned char fnd_digits[4] = {0, 0, 0, 0};
    unsigned int update_timer = 0;

    while (1) {
        // 3초마다 데이터 갱신
        if (update_timer >= 3000) {
            cds_value = read_adc(); // CdS 값 읽기
            set_led_and_buzzer_by_cds(cds_value); // CdS 값에 따라 LED 및 부저 설정
            update_digits(cds_value, fnd_digits); // FND 값 갱신
            update_timer = 0;
        }

        fnd_display(fnd_digits); // FND 표시
        _delay_ms(1); // 루프 딜레이
        update_timer++;
    }

    return 0;
}
